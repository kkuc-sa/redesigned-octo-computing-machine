fastlane_require 'dotenv'
default_platform(:ios)

ENV['FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT'] = "60"
ENV['FASTLANE_XCODEBUILD_SETTINGS_RETRIES'] = "10"

# - Variables

module_name = "Project"
precompiled_folder_path = "Precompiled"
build_folder_path = ".build"
precompiled_xcframework_path = "#{precompiled_folder_path}/Project.xcframework"
xcodeproj_path = "Project.xcodeproj"
pbxproj_path = "#{xcodeproj_path}/project.pbxproj"
podspec_path = "Project.podspec"

# - Lanes

update_fastlane

platform :ios do

  before_all do |lane, options|
    Dotenv.overload '.env.secret'
  end

  desc "Runs module unit tests"
  lane :test do 
    run_tests(scheme: module_name)
  end

  desc "Releases a new version of the module"
  lane :release do |options|
    ref = options[:ref]
    version = get_version_from_ref(ref: ref)

    sh("git checkout -b #{ref} || true")
    bump_marketing_version(version: version)
    precompile
    release_to_github(version: version)
    clean
  end

  desc "Sets MARKETING_VERION and commits changes"
  lane :set_marketing_version do |options|
    version = options[:version]
    UI.message "Setting marketing version with #{version}"

    increment_version_number_in_xcodeproj(
      version_number: version,     
      xcodeproj: xcodeproj_path
    )
    git_commit(
      path: [pbxproj_path],
      message: "[skip ci] Set module version to #{version}",
      allow_nothing_to_commit: true
    )
  end

  desc "Builds module to xcframework"
  lane :build_xcframework do 
    precompile_module(
      scheme_name: module_name,
      module_name: module_name,
      output_dir: precompiled_folder_path
    )
  end

  desc "Releases precompiled xcframework to GitHub"
  lane :release_to_github do |options|
    version = options[:version]

    set_github_release(
      repository_name: github_repository_name,
      api_token: github_api_token,
      upload_assets: [precompiled_xcframework_path]
    )

    update_podspec
  end

  lane :update_podspec do
    binary_source = lane_context[SharedValues::SET_GITHUB_RELEASE_HTML_LINK]
    set_podspec_http_source(binary_zip_path: binary_source, podspec_path: podspec_path)
    git_commit(
      path: [podspec_path],
      message: "[skip ci] Update podspec",
      allow_nothing_to_commit: true
    )
  end

  lane :clean do
    clean_outputs(output_dir: precompiled_folder_path)
  end  

end

# - Utils

def github_api_token
  ENV['GITHUB_API_TOKEN']
end

def github_repository_name
  ENV['GITHUB_REPOSITORY_NAME']
end